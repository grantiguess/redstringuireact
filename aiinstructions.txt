# Redstring Project: AI Assistant Guide

## Project Description:

Redstring is a sophisticated React-based cognitive interface designed for constructing, traversing, and interacting with networks of conceptual nodes. It aims to be a "cognitive scaffold," mirroring the recursive, associative, contextual, and non-linear nature of human thought. The application allows users to build and navigate graphs where nodes can represent ideas and can themselves contain other graphs, enabling deep hierarchical recursion and composition.

**Core Technical Aspects:**
- **Frontend:** Fully React-rendered, with UI logic and state management handled on the client-side.
- **State Management:** Zustand is used for managing global state, including the active graph context, node/edge data, saved states, multi-graph support, and interactive logic.
- **Central Orchestration:** `src/NodeCanvas.jsx` is the pivotal component, mediating user interactions (mouse, touch, keyboard), graph state, view transformations (pan, zoom, drag), and the recursive structure engine.
- **Rendering:** All graph rendering occurs within a React-managed `<svg>` canvas. Node rendering is dynamic, handling dimensions, image scaling, and connection positioning.
- **Data Structures:** Core graph elements like Nodes, Edges, and Graphs are defined in `src/core/` (`Node.js`, `Edge.js`, `Graph.js`).
- **Interaction:** Features drag-to-connect for edge creation, multiselect, pan/zoom, a Pie Menu for contextual actions, and graph-centric panels for editing and browsing.

**Philosophical Architecture:**
Redstring is more than a tool; it's an interface for thinking in networks. Its design is guided by key principles:
1.  **All is a Graph:** Every concept is a node, every relationship an edge.
2.  **Recursion as Ontology:** Nodes can contain entire graphs, reflecting cognitive abstraction and layering.
3.  **Embodied Semantics:** Users spatially arrange knowledge, connecting meanings through direct manipulation.
4.  **Open Topology:** No predefined root; users start where meaning begins for them, supporting a rhizomatic structure.
5.  **Dual Interface (Syntax and Mythos):** Panels provide structured data access (syntax), while the canvas offers a symbolic, spatial, and intuitive interaction space (mythos).

The ultimate goal of Redstring is to provide an interface that nurtures depth, pattern recognition, and symbolic recomposition, acting as a mirror to the human mind's layered and non-linear processing.

## Specialized AI Instructions for Redstring:

When assisting with the Redstring project, please adhere to the following guidelines:

1.  **Understand the Core Philosophy:** Always consider Redstring's nature as a "cognitive scaffold." Changes and suggestions should align with its goal of mirroring and supporting complex, networked thought processes.
2.  **Prioritize `NodeCanvas.jsx`:** Recognize `src/NodeCanvas.jsx` as the central hub for rendering, interaction (including canvas-level mouse/wheel events), and state mediation. Modifications here will have significant impact.
3.  **Respect Zustand State Management:**
    *   Be mindful of how graph data (nodes, edges, active graph, saved states) is structured and managed within the Zustand store.
    *   When dealing with state, look for relevant store actions and selectors.
4.  **Embrace Recursion:** The concept of nodes containing other graphs is fundamental. Ensure that any logic related to graph manipulation, display, or interaction correctly handles this recursive nature.
5.  **Maintain the Dual Interface:** Acknowledge the distinction and interplay between the structured data in panels (e.g., `Panel.jsx`, `GraphBrowserPanel.jsx`) and the spatial, symbolic canvas. Enhancements should ideally support both aspects.
6.  **Focus on Interaction Mechanics & UX Tuning:**
    *   For UI/UX changes, ensure they are consistent with existing mechanics like drag-to-connect, pan/zoom, multiselect, and the Pie Menu (`PieMenu.jsx`).
    *   New interactions should feel intuitive and "embodied."
    *   Numerical parameters for user experience (e.g., scroll/zoom sensitivities, animation durations) are often centralized in `src/constants.js`.
7.  **Core Data Structures:** Be familiar with the definitions and functionalities within `src/core/Graph.js`, `src/core/Node.js`, and `src/core/Edge.js` when implementing features related to graph elements.
8.  **Rendering Logic:** Understand that rendering happens in an SVG canvas within React. Pay attention to transform application for pan/zoom and dynamic node rendering.
9.  **File Structure & Component Logic Awareness:**
    *   UI Components: Primarily in `src/` (e.g., `Node.jsx`, `Panel.jsx`, `Header.jsx`).
    *   Core Logic: `src/core/`.
    *   State Management: Likely within `src/store/` (Zustand is used).
    *   Hooks: Custom hooks in `src/hooks/` (e.g., `useCanvasWorker.js`).
    *   Styling: CSS files (e.g., `Panel.css`) may define shared classes with contextual overrides for specific components. CSS might be globally scoped or imported to be shared.
    *   Component-Specific UI Logic: Similar UI features (e.g., editable titles) may have distinct implementations and state management within their respective components (`Header.jsx`, `Panel.jsx`) using React hooks (`useEffect`) and direct DOM manipulation for dynamic behaviors.
10. **Problem Solving and Suggestions:**
    *   When identifying issues or proposing solutions, explain how they relate to or affect the core principles.
    *   Suggest solutions that enhance the user's ability to think in networks and manage complex information visually and spatially.
    *   If performance is a concern, especially with canvas rendering or large graphs, investigate solutions like offloading work to `canvasWorker.js` or optimizing React component rendering.
    *   Be prepared for debugging subtle browser rendering quirks, especially concerning interactive form elements.
11. **Code Style and Conventions:** Adhere to existing code patterns, styling (ESLint likely configured via `eslint.config.js`), and component structure.
12. **Testing:** Note the presence of test files (e.g., `App.test.jsx`, `NodeCanvas.test.jsx`). New features or significant refactors should ideally be accompanied by relevant tests.

By keeping these points in mind, you can effectively contribute to the development and refinement of Redstring, ensuring it stays true to its unique vision and technical architecture.

## Advanced Interaction Patterns & Recent Developments:

Beyond the general guidelines, recent development has focused on more complex UI interactions, particularly concerning the PieMenu, node preview/expansion states, and animation synchronization. Key points to be aware of:

13. **PieMenu State and Animation Coordination:**
    *   The PieMenu's visibility and content are managed by several states in `NodeCanvas.jsx`, including `selectedNodeIdForPieMenu` (determines target node), `isTransitioningPieMenu` (manages state during expand/contract actions), and `currentPieMenuData` (holds data for the menu currently being rendered or animating out).
    *   The `PieMenu.jsx` component itself has internal animation states (`animationState`: 'popping', 'visible_steady', 'shrinking') and relies on `onExitAnimationComplete` callback to `NodeCanvas.jsx` to signal completion of its exit animation. This callback is crucial for `NodeCanvas.jsx` to then update its own state (e.g., `previewingNodeId`, `selectedNodeIdForPieMenu`) and trigger the appearance of a new PieMenu configuration if needed.
    *   Pay close attention to the sequence of state updates in `NodeCanvas.jsx`'s `useEffect` hooks that depend on `selectedNodeIds`, `isTransitioningPieMenu`, `selectedNodeIdForPieMenu`, and the `onExitAnimationComplete` callback. Incorrect sequencing can lead to animation glitches or incorrect menu states.

14. **Dynamic PieMenu Buttons & Node Preview State:**
    *   The buttons displayed in the PieMenu (`targetPieMenuButtons` in `NodeCanvas.jsx`) are dynamically generated based on the current context, especially whether the selected node is the `previewingNodeId`. For example, an "Expand" button might change to a "Contract" button.
    *   The `previewingNodeId` state in `NodeCanvas.jsx` controls the expanded/preview appearance of a node. Transitions between normal and preview states are often linked to PieMenu actions and require careful state management to ensure smooth visual changes and correct menu updates.

15. **Z-axis Management and SVG Rendering Order:**
    *   To ensure correct visual layering (e.g., an expanded node and its contract button appearing above other nodes but below a dragged node), the rendering order within the SVG in `NodeCanvas.jsx` is critical.
    *   The adopted strategy involves rendering a node's associated PieMenu immediately *before* that node in the SVG document order. This is achieved by integrating PieMenu rendering within the node mapping loops in `NodeCanvas.jsx`.

16. **React Component Keys and CSS Animation Stability:**
    *   When implementing CSS transitions or animations on React components (e.g., node resizing on expansion in `Node.jsx`), ensure that the `key` prop of the component remains stable throughout the animation.
    *   Changes to the `key` prop cause React to unmount and remount the component, interrupting any ongoing CSS transitions.
    *   If node data or rendering order needs to change, consider using a pre-processing step (e.g., creating a `processedNodes` array in `NodeCanvas.jsx`) to calculate new properties or sort nodes while maintaining stable `node.id` keys for the rendered components.

17. **Debugging Complex UI Interactions:**
    *   For features involving multiple interacting states, animations, and callbacks (like the PieMenu and node expansion), liberal use of `console.log` to trace state changes, prop values, and event firing sequences across components (`NodeCanvas.jsx`, `PieMenu.jsx`) is invaluable for debugging.

18. **Managing Interaction Triggers (Clicks vs. Drags):**
    *   Be mindful of how interactions like mouse down, mouse move, and mouse up are interpreted. For instance, a drag operation should not inadvertently trigger a click that would show/hide the PieMenu.
    *   State variables like `hasMouseMovedSinceDown` in `NodeCanvas.jsx` can help differentiate between a click and the start of a drag, preventing unwanted PieMenu animations during node dragging.

19. **Scroll Wheel and Trackpad Input Handling:**
    *   The `handleWheel` function in `NodeCanvas.jsx` implements sophisticated input detection to provide appropriate behavior for different input devices:
        - **Mac Trackpad Pinch-to-Zoom:** `Ctrl + scroll` triggers zoom with higher sensitivity (`TRACKPAD_ZOOM_SENSITIVITY`)
        - **Mac Trackpad Two-Finger Pan:** Regular two-finger scroll (no Ctrl) with horizontal movement (`deltaX !== 0`) triggers panning in both X and Y directions
        - **Universal Scroll Wheel Zoom:** Vertical scroll without horizontal movement falls through to zoom behavior using `SMOOTH_MOUSE_WHEEL_ZOOM_SENSITIVITY`
    *   The key detection logic distinguishes between trackpad and mouse wheel on Mac by checking for horizontal movement (`deltaX !== 0`), as mouse wheels typically only produce vertical `deltaY` values while trackpads often have both components
    *   This ensures natural behavior: trackpad users get expected pan/zoom gestures, while mouse wheel users get scroll-to-zoom functionality regardless of platform

20. **Inline Node Editing and Panel Integration:**
    *   The PieMenu's "Edit" button (`targetPieMenuButtons` in `NodeCanvas.jsx`) triggers both inline canvas editing and panel tab creation/activation
    *   When the edit button is clicked, it: (1) opens/creates a panel tab for the node using `storeActions.openRightPanelNodeTab()`, (2) ensures the right panel is expanded, and (3) enables inline editing on the canvas by setting `editingNodeIdOnCanvas`
    *   The `Node.jsx` component handles inline editing through `isEditingOnCanvas`, `onCommitCanvasEdit`, and `onCancelCanvasEdit` props, displaying either a text span or an input field based on editing state
    *   Real-time synchronization between canvas and panel editing is achieved through the Zustand store - both interfaces update the same node data, ensuring changes appear immediately in both locations
    *   Inline editing supports Enter to commit, Escape to cancel, and blur to commit, with proper focus management and visual styling via the `.node-name-input` CSS class
