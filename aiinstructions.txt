# Redstring Project: AI Assistant Guide

## Project Description:

Redstring is a sophisticated React-based cognitive interface designed for constructing, traversing, and interacting with networks of conceptual nodes. It aims to be a "cognitive scaffold," mirroring the recursive, associative, contextual, and non-linear nature of human thought. The application allows users to build and navigate graphs where nodes can represent ideas and can themselves contain other graphs, enabling deep hierarchical recursion and composition.

**Core Technical Aspects:**
- **Frontend:** Fully React-rendered, with UI logic and state management handled on the client-side.
- **State Management:** Zustand is used for managing global state, including the active graph context, node/edge data, saved states, multi-graph support, and interactive logic.
- **Central Orchestration:** `src/NodeCanvas.jsx` is the pivotal component, mediating user interactions (mouse, touch, keyboard), graph state, view transformations (pan, zoom, drag), and the recursive structure engine.
- **Rendering:** All graph rendering occurs within a React-managed `<svg>` canvas. Node rendering is dynamic, handling dimensions, image scaling, and connection positioning.
- **Data Structures:** Core graph elements like Nodes, Edges, and Graphs are defined in `src/core/` (`Node.js`, `Edge.js`, `Graph.js`).
- **Interaction:** Features drag-to-connect for edge creation, multiselect, pan/zoom, a Pie Menu for contextual actions, and graph-centric panels for editing and browsing.

**Philosophical Architecture:**
Redstring is more than a tool; it's an interface for thinking in networks. Its design is guided by key principles:
1.  **All is a Graph:** Every concept is a node, every relationship an edge.
2.  **Recursion as Ontology:** Nodes can contain entire graphs, reflecting cognitive abstraction and layering.
3.  **Embodied Semantics:** Users spatially arrange knowledge, connecting meanings through direct manipulation.
4.  **Open Topology:** No predefined root; users start where meaning begins for them, supporting a rhizomatic structure.
5.  **Dual Interface (Syntax and Mythos):** Panels provide structured data access (syntax), while the canvas offers a symbolic, spatial, and intuitive interaction space (mythos).

The ultimate goal of Redstring is to provide an interface that nurtures depth, pattern recognition, and symbolic recomposition, acting as a mirror to the human mind's layered and non-linear processing.

## Specialized AI Instructions for Redstring:

When assisting with the Redstring project, please adhere to the following guidelines:

1.  **Understand the Core Philosophy:** Always consider Redstring's nature as a "cognitive scaffold." Changes and suggestions should align with its goal of mirroring and supporting complex, networked thought processes.
2.  **Prioritize `NodeCanvas.jsx`:** Recognize `src/NodeCanvas.jsx` as the central hub for rendering, interaction (including canvas-level mouse/wheel events), and state mediation. Modifications here will have significant impact.
3.  **Respect Zustand State Management:**
    *   Be mindful of how graph data (nodes, edges, active graph, saved states) is structured and managed within the Zustand store.
    *   When dealing with state, look for relevant store actions and selectors.
4.  **Embrace Recursion:** The concept of nodes containing other graphs is fundamental. Ensure that any logic related to graph manipulation, display, or interaction correctly handles this recursive nature.
5.  **Maintain the Dual Interface:** Acknowledge the distinction and interplay between the structured data in panels (e.g., `Panel.jsx`, `GraphBrowserPanel.jsx`) and the spatial, symbolic canvas. Enhancements should ideally support both aspects.
6.  **Focus on Interaction Mechanics & UX Tuning:**
    *   For UI/UX changes, ensure they are consistent with existing mechanics like drag-to-connect, pan/zoom, multiselect, and the Pie Menu (`PieMenu.jsx`).
    *   New interactions should feel intuitive and "embodied."
    *   Numerical parameters for user experience (e.g., scroll/zoom sensitivities, animation durations) are often centralized in `src/constants.js`.
7.  **Core Data Structures:** Be familiar with the definitions and functionalities within `src/core/Graph.js`, `src/core/Node.js`, and `src/core/Edge.js` when implementing features related to graph elements.
8.  **Rendering Logic:** Understand that rendering happens in an SVG canvas within React. Pay attention to transform application for pan/zoom and dynamic node rendering.
9.  **File Structure & Component Logic Awareness:**
    *   UI Components: Primarily in `src/` (e.g., `Node.jsx`, `Panel.jsx`, `Header.jsx`).
    *   Core Logic: `src/core/`.
    *   State Management: Likely within `src/store/` (Zustand is used).
    *   Hooks: Custom hooks in `src/hooks/` (e.g., `useCanvasWorker.js`).
    *   Styling: CSS files (e.g., `Panel.css`) may define shared classes with contextual overrides for specific components. CSS might be globally scoped or imported to be shared.
    *   Component-Specific UI Logic: Similar UI features (e.g., editable titles) may have distinct implementations and state management within their respective components (`Header.jsx`, `Panel.jsx`) using React hooks (`useEffect`) and direct DOM manipulation for dynamic behaviors.
10. **Problem Solving and Suggestions:**
    *   When identifying issues or proposing solutions, explain how they relate to or affect the core principles.
    *   Suggest solutions that enhance the user's ability to think in networks and manage complex information visually and spatially.
    *   If performance is a concern, especially with canvas rendering or large graphs, investigate solutions like offloading work to `canvasWorker.js` or optimizing React component rendering.
    *   Be prepared for debugging subtle browser rendering quirks, especially concerning interactive form elements.
11. **Code Style and Conventions:** Adhere to existing code patterns, styling (ESLint likely configured via `eslint.config.js`), and component structure.
12. **Testing:** Note the presence of test files (e.g., `App.test.jsx`, `NodeCanvas.test.jsx`). New features or significant refactors should ideally be accompanied by relevant tests.

By keeping these points in mind, you can effectively contribute to the development and refinement of Redstring, ensuring it stays true to its unique vision and technical architecture.

## Advanced Interaction Patterns & Recent Developments:

Beyond the general guidelines, recent development has focused on more complex UI interactions, particularly concerning the PieMenu, node preview/expansion states, and animation synchronization. Key points to be aware of:

13. **PieMenu State and Animation Coordination:**
    *   The PieMenu's visibility and content are managed by several states in `NodeCanvas.jsx`, including `selectedNodeIdForPieMenu` (determines target node), `isTransitioningPieMenu` (manages state during expand/contract actions), and `currentPieMenuData` (holds data for the menu currently being rendered or animating out).
    *   The `PieMenu.jsx` component itself has internal animation states (`animationState`: 'popping', 'visible_steady', 'shrinking') and relies on `onExitAnimationComplete` callback to `NodeCanvas.jsx` to signal completion of its exit animation. This callback is crucial for `NodeCanvas.jsx` to then update its own state (e.g., `previewingNodeId`, `selectedNodeIdForPieMenu`) and trigger the appearance of a new PieMenu configuration if needed.
    *   Pay close attention to the sequence of state updates in `NodeCanvas.jsx`'s `useEffect` hooks that depend on `selectedNodeIds`, `isTransitioningPieMenu`, `selectedNodeIdForPieMenu`, and the `onExitAnimationComplete` callback. Incorrect sequencing can lead to animation glitches or incorrect menu states.

14. **Dynamic PieMenu Buttons & Node Preview State:**
    *   The buttons displayed in the PieMenu (`targetPieMenuButtons` in `NodeCanvas.jsx`) are dynamically generated based on the current context, especially whether the selected node is the `previewingNodeId`. For example, an "Expand" button might change to a "Contract" button.
    *   The `previewingNodeId` state in `NodeCanvas.jsx` controls the expanded/preview appearance of a node. Transitions between normal and preview states are often linked to PieMenu actions and require careful state management to ensure smooth visual changes and correct menu updates.

15. **Z-axis Management and SVG Rendering Order:**
    *   To ensure correct visual layering (e.g., an expanded node and its contract button appearing above other nodes but below a dragged node), the rendering order within the SVG in `NodeCanvas.jsx` is critical.
    *   The adopted strategy involves rendering a node's associated PieMenu immediately *before* that node in the SVG document order. This is achieved by integrating PieMenu rendering within the node mapping loops in `NodeCanvas.jsx`.

16. **React Component Keys and CSS Animation Stability:**
    *   When implementing CSS transitions or animations on React components (e.g., node resizing on expansion in `Node.jsx`), ensure that the `key` prop of the component remains stable throughout the animation.
    *   Changes to the `key` prop cause React to unmount and remount the component, interrupting any ongoing CSS transitions.
    *   If node data or rendering order needs to change, consider using a pre-processing step (e.g., creating a `processedNodes` array in `NodeCanvas.jsx`) to calculate new properties or sort nodes while maintaining stable `node.id` keys for the rendered components.

17. **Debugging Complex UI Interactions:**
    *   For features involving multiple interacting states, animations, and callbacks (like the PieMenu and node expansion), liberal use of `console.log` to trace state changes, prop values, and event firing sequences across components (`NodeCanvas.jsx`, `PieMenu.jsx`) is invaluable for debugging.

18. **Managing Interaction Triggers (Clicks vs. Drags):**
    *   Be mindful of how interactions like mouse down, mouse move, and mouse up are interpreted. For instance, a drag operation should not inadvertently trigger a click that would show/hide the PieMenu.
    *   State variables like `hasMouseMovedSinceDown` in `NodeCanvas.jsx` can help differentiate between a click and the start of a drag, preventing unwanted PieMenu animations during node dragging.

19. **Scroll Wheel and Trackpad Input Handling:**
    *   The `handleWheel` function in `NodeCanvas.jsx` implements industry-standard input device detection to provide appropriate behavior for different input devices across all platforms:
        - **Mac Trackpad Pinch-to-Zoom:** `Ctrl + scroll` on Mac always triggers zoom regardless of device type, using `TRACKPAD_ZOOM_SENSITIVITY`
        - **Trackpad Two-Finger Pan:** Detected using multiple heuristics including fractional delta values (`deltaY % 1 !== 0`), horizontal movement (`deltaX > 0.1`), small continuous deltas (`deltaY < 50`), and varied delta patterns. Triggers panning in both X and Y directions using `PAN_DRAG_SENSITIVITY`
        - **Mouse Wheel Zoom:** Detected by large discrete values (`deltaY >= 50`), integer-only deltas, and consistent/repeated value patterns typical of mouse wheels. Triggers zoom using `SMOOTH_MOUSE_WHEEL_ZOOM_SENSITIVITY`
    *   The detection system maintains a rolling history of the last 10 delta values (`deltaHistoryRef`) to analyze patterns over time, providing more reliable device identification than single-event heuristics
    *   Key detection indicators:
        - **Trackpad:** Fractional deltas, horizontal movement, small varied values, continuous smooth input
        - **Mouse Wheel:** Large integer deltas, repeated values, simple ratios (0.5x, 2x, 3x), discrete stepped input
    *   This cross-platform approach ensures natural behavior on Windows, Mac, and Linux: trackpad users get expected pan/zoom gestures while mouse wheel users get scroll-to-zoom functionality
    *   Debug information includes detected device type, delta history length, and analysis flags for troubleshooting input detection issues

20. **Inline Node Editing and Panel Integration:**
    *   The PieMenu's "Edit" button (`targetPieMenuButtons` in `NodeCanvas.jsx`) triggers both inline canvas editing and panel tab creation/activation
    *   When the edit button is clicked, it: (1) opens/creates a panel tab for the node using `storeActions.openRightPanelNodeTab()`, (2) ensures the right panel is expanded, and (3) enables inline editing on the canvas by setting `editingNodeIdOnCanvas`
    *   The `Node.jsx` component handles inline editing through `isEditingOnCanvas`, `onCommitCanvasEdit`, and `onCancelCanvasEdit` props, displaying either a text span or an input field based on editing state
    *   Real-time synchronization between canvas and panel editing is achieved through the Zustand store - both interfaces update the same node data, ensuring changes appear immediately in both locations
    *   Inline editing supports Enter to commit, Escape to cancel, and blur to commit, with proper focus management and visual styling via the `.node-name-input` CSS class

## Dynamic Description Feature & Context-Aware System:

21. **Dynamic Description Implementation:**
   *   Successfully implemented a sophisticated dynamic description feature for expanded nodes that includes:
        - Dynamic height calculation using DOM measurement (createElement/appendChild approach in `utils.js`)
        - "Chin" expansion effect below InnerNetwork areas that adds visual space for description content
        - Text wrapping with 3-line limit using CSS properties (`display: -webkit-box`, `WebkitLineClamp: 3`)
        - Seamless integration with the existing node expansion/preview system
   *   The description content is sourced from the currently active definition graph's description, making it context-aware
   *   Height calculations are performed in `getNodeDimensions()` in `utils.js` and passed down to Node components as `descriptionAreaHeight`

22. **Context-Aware Definition System:**
   *   Implemented a sophisticated context-aware system where nodes remember their preferred definition for specific graph contexts
   *   Uses `nodeDefinitionIndices` Map in `NodeCanvas.jsx` with `"nodeId-graphId"` formatted keys to track active definition per context
   *   Example: A "Car" node defaults to "Engine" definition in "Mechanical Systems" graph but "Exterior" definition in "Design Review" graph
   *   Navigation between definitions is handled via callback system (`onNavigateDefinition`) with index-based tracking
   *   Panel and canvas synchronization ensures both interfaces always show the same definition content

23. **Race Condition Fixes and State Management:**
   *   Fixed critical race condition in `Node.jsx` where `useEffect` had `currentDefinitionIndex` in dependencies, causing navigation to reset on every definition change
   *   Solution: Removed `currentDefinitionIndex` from effect dependencies and used refs (`hasResetForPreview`) to track session state
   *   **Type Consistency:** Fixed `loadInitialExpandedGraphIds()` in `src/store/graphStore.js` to return `new Set()` instead of `[]` - application expects Set object throughout
   *   **Content-Specific Expansion:** Removed forced reset logic so nodes expand to show the definition currently active in the panel, not always the first definition

24. **Panel-Canvas Synchronization Architecture:**
   *   Achieved full synchronization between Panel editing interface and canvas visualization through shared state management
   *   `Panel.jsx` uses `getCurrentDefinitionDescription()` helper to display current definition's description instead of node's base description
   *   `handleBioChange` in Panel.jsx updates the current definition graph's description rather than the node's description
   *   Navigation controls in both panel and expanded nodes use the same context-aware `nodeDefinitionIndices` system
   *   Expand button opens the currently active definition, maintaining context consistency

25. **Key Technical Patterns and Debugging:**
   *   **Recursive Architecture Handling:** All data flows respect the "nodes are graphs and graphs are nodes" principle - Entry instances serve dual purposes
   *   **Dynamic Height with Animation:** Node height animates smoothly when definitions change using CSS transitions on computed dimensions
   *   **Map-based Context Tracking:** Using Map data structure with composite keys enables efficient O(1) lookups for context-specific state
   *   **Callback-based Navigation:** Definition navigation uses callback pattern to maintain separation of concerns between NodeCanvas state management and Node display logic
   *   **Context-Specific Keys:** Pattern of `"nodeId-graphId"` composite keys enables same node to have different states in different graph contexts

26. **Common Pitfalls and Solutions:**
   *   **useEffect Dependencies:** Be extremely careful with effect dependencies when dealing with state that changes frequently (like `currentDefinitionIndex`)
   *   **Type Expectations:** Ensure store initialization functions return correct types (Set vs Array) that match application expectations
   *   **Reset Logic:** Avoid forcing state resets during transitions - preserve user's active context when possible
   *   **Composite State Keys:** When implementing context-aware features, use composite keys that capture the full context (nodeId + graphId)
   *   **Synchronization Points:** Identify all places where the same data is displayed and ensure they use the same data source and update mechanisms

## RedstringMenu System & File Management Architecture:

27. **RedstringMenu Component Architecture:**
   *   The `RedstringMenu.jsx` component provides the main application menu accessed via the animated header logo
   *   Features a sophisticated nested submenu system with timeout-based hover logic to prevent menu flicker
   *   **Key State Management:** Uses `openSubmenu` state to track which submenu is active ('File', 'RecentFiles', 'View', etc.)
   *   **Hover Logic:** Implements `closeTimeout` system with 200ms delay to handle smooth transitions between nested menus
   *   **Critical Fix:** Resolved major bug where the File submenu would disappear when hovering over "Recent Files" - fixed by keeping File submenu open when RecentFiles is active using `(openSubmenu === 'File' || openSubmenu === 'RecentFiles')`

28. **File Management and Recent Files System:**
   *   **Recent Files Submenu:** Dynamically loads recent `.redstring` files using `getRecentFiles()` from `src/store/fileStorage.js`
   *   **File Operations:** Integrated universe file management (New, Save, Open, Recent) directly into the menu system
   *   **Async Loading:** Recent files are loaded asynchronously when the menu opens to avoid blocking the UI
   *   **Error Handling:** Graceful fallback when recent files can't be loaded, with console error logging for debugging
   *   **Menu Item Ordering:** Optimized order to follow user workflow: New Universe → Save Universe → Open... (with recent files submenu)

29. **Critical File Loading Race Condition Fix:**
   *   **Root Cause:** `clearUniverse()` calls in `NodeCanvas.jsx` were creating race conditions where loaded file data was immediately overwritten with empty state
   *   **Solution:** Removed redundant `clearUniverse()` calls from `onNewUniverse`, `onOpenUniverse`, and `onOpenRecentFile` handlers in `NodeCanvas.jsx`
   *   **Data Serialization Fix:** Fixed `loadUniverseFromFile` in `src/store/graphStore.js` to properly handle both raw JSON and already-deserialized Map data
   *   **Import Chain:** Fixed data flow through `importFromRedstring` function to ensure proper Map/Set conversion for graphs, nodes, and edges
   *   **Auto-save Integration:** Ensured file operations properly enable auto-save functionality after successful load/create operations

30. **Nested Menu Positioning and Styling:**
   *   **Z-Index Management:** Recent Files submenu uses `z-index: 1099` to appear behind parent menus but above canvas elements
   *   **Dynamic Positioning:** Submenu positioned with `left: 100%` and `margin-left: 5px` for proper spacing without overlap
   *   **Responsive Width:** Recent Files submenu supports `min-width: 250px` and `max-width: 500px` to accommodate long filenames
   *   **Hover States:** Unified hover styling where entire recent file items (name + date) highlight as cohesive units
   *   **Visual Polish:** Recent file items show filename and last-opened date with proper ellipsis for overflow text

31. **Menu Animation and State Lifecycle:**
   *   **Entry/Exit Animations:** Menu uses CSS keyframe animations (`slideDown`/`slideUp`) with proper state management
   *   **Component Lifecycle:** `shouldRender` state ensures menu is removed from DOM only after exit animation completes
   *   **Cleanup Logic:** Proper timeout cleanup prevents memory leaks and state inconsistencies
   *   **Submenu Coordination:** Parent menu hover states are preserved when child submenus are active

32. **File Management Integration Patterns:**
   *   **Props-Based Actions:** Menu receives file management functions as props from `NodeCanvas.jsx` (onNewUniverse, onSaveUniverse, etc.)
   *   **Store Integration:** File operations interact with Zustand store through `loadUniverseFromFile`, `setUniverseError`, etc.
   *   **Error State Management:** Universe loading/saving errors are properly handled through store state and user feedback
   *   **Session Persistence:** File handles and recent files are persisted using IndexedDB for reconnection across browser sessions
   *   **Auto-discovery:** System attempts to auto-connect to universe files in Documents folder for seamless user experience

33. **Menu System Debugging and Maintenance:**
   *   **State Logging:** Previously included extensive console logging for submenu state changes (since cleaned up)
   *   **Hover Debugging:** Used to log menu item enter/leave events for debugging hover issues (since removed)
   *   **File Loading Logs:** Maintained essential file operation logs with filenames for debugging file management issues
   *   **Performance Considerations:** Recent files loading is async and cached to avoid repeated filesystem access
   *   **Cross-Platform Testing:** Menu behavior tested across different input devices and operating systems

34. **Combined Open/Recent Button Pattern:**
   *   **UX Innovation:** Merged separate "Open Universe" and "Recent Files" buttons into single "Open..." button with submenu
   *   **Standard Practice:** Follows common application patterns where primary action (click) opens file dialog and hover reveals recent files
   *   **Interaction Design:** Click behavior maintains existing file opening functionality while hover provides quick access to recent files
   *   **Space Efficiency:** Reduces menu clutter while maintaining full functionality and improving discoverability of recent files feature

35. **Interactive Directional Edges:**
   *   **Core Concept:** A system for adding persistent, directional arrows to edges directly on the canvas. This is a core feature for representing relationships like inheritance or flow.
   *   **Data Model:** The `Edge` class in `src/core/Edge.js` includes a `directionality` property: `{ sourceArrow: boolean, destinationArrow: boolean }`. This state is initialized in the constructor and is saved with the universe.
   *   **Interaction (`NodeCanvas.jsx`):**
        - Edges have a thick (40px) invisible hitbox for easy hovering.
        - When hovering over an edge where an arrow is *not* permanently enabled, a black dot with a larger, invisible circular hitbox appears at that end of theedge.
        - Clicking this dot (or a permanently visible arrow) toggles the corresponding boolean in the `directionality` object in the data model (via the `updateEdge` store action), making the arrow appear or disappear permanently.
   *   **Rendering (`NodeCanvas.jsx`):**
        - The rendering logic checks `edge.directionality` to see if an arrow should be permanently displayed.
        - The hover-only dots are rendered if the arrow is not permanent and the edge is being hovered.
        - Permanent arrows are rendered as large, black, rounded triangles using a `<polygon>` with `paintOrder="stroke fill"` for a clean look.
        - When an arrow or dot is shown, the main connection `<line>` is geometrically retracted to touch the base of the arrow/dot, which itself is calculated to touch the rectangular boundary of the node. This is handled by a `getNodeEdgeIntersection` helper function within `NodeCanvas.jsx`.
